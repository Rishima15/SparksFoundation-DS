import numpy as np #for any computational operations
import matplotlib.pyplot as plt #for data visualization
import seaborn as sns# for data visualization
import pandas as pd# loads data from various sources
%matplotlib inline
columns =['sepal length', 'sepal width', 'Petal length', 'Petal width', 'Class_labels']#setting column names
df=pd.read_csv('iris.data', names=columns) #loads data, comma seperated files
df.head()#shows first 5 rows from the datset table
df.describe()#provides description of data
sns.pairplot(df, hue='Class_labels')#the whole dataset is visualized.
# from this visualization, we can conclude that iris-sertosa is well seperated from the other two
# iris virginica is the longest flower and iris sertosa the shortest
data = df.values
X = data[:,0:4]
Y = data[:,4]
#features are seperated from the target value from here.
Y_Data = np.array([np.average(X[:, i][Y==j].astype('float32')) #calculates average of an array
 for i in range (X.shape[1])
 for j in (np.unique(Y))]) #usage of two loops inside a list is known as list comprehension
Y_Data_reshaped = Y_Data.reshape(4, 3)
Y_Data_reshaped = np.swapaxes(Y_Data_reshaped, 0, 1)
X_axis = np.arange(len(columns)-1)
#the matrix is reshaped and axis is changed.
width = 0.25
# Plot the average using matplotlib
plt.bar(X_axis, Y_Data_reshaped[0], width, label = 'Setosa')
plt.bar(X_axis+width, Y_Data_reshaped[1], width, label = 'Versicolour')
plt.bar(X_axis+width*2, Y_Data_reshaped[2], width, label = 'Virginica')
plt.xticks(X_axis, columns[:4])
plt.xlabel("Features")
plt.ylabel("Value in cm.")
plt.legend(bbox_to_anchor=(1.3,1))
plt.show()
# Split the data to train and test dataset.
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)
# Support vector machine algorithm
from sklearn.svm import SVC
svn = SVC()
svn.fit(X_train, y_train)
# Predict from the test dataset
predictions = svn.predict(X_test)
# Calculate the accuracy
from sklearn.metrics import accuracy_score
accuracy_score(y_test, predictions)
# A detailed classification report
from sklearn.metrics import classification_report
print(classification_report(y_test, predictions))
X_new = np.array([[3, 2, 1, 0.2], [  4.9, 2.2, 3.8, 1.1 ], [  5.3, 2.5, 4.6, 1.9 ]])
#Prediction of the species from the input vector
prediction = svn.predict(X_new)
print("Prediction of Species: {}".format(prediction))
# Save the model
import pickle
with open('SVM.pickle', 'wb') as f:
    pickle.dump(svn, f)
# Load the model
with open('SVM.pickle', 'rb') as f:
    model = pickle.load(f)
model.predict(X_new)
